#!/bin/bash

# Simple command-line utility for studying flashcards

usage() { echo "Usage: bashcards [-h|-H] DECKFILE"; } # Function called when -h flag is passed

display_title() { # Function for displaying utility title
	printf "##########################################\n"
	printf "#############   BASHCARDS   ##############\n"
	printf "##########################################\n\n"
	sleep 1.5
}

# COLORS
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color


REVERSE='FALSE' # Variable determines side display order
SHUFFLE='FALSE' # Variable determines card display order (sequential/random)
while getopts "hHrRsS" options; do
	case ${options} in
		h|H)
			usage
			exit
			;;
		r|R)
			REVERSE='TRUE'
			;;
		s|S)
			SHUFFLE='TRUE'
			;;
	esac
done
shift "$((OPTIND-1))"



#Display title
display_title

# Display name of deck
printf "Studying deck \"$(basename -s .csv "$1")\"\n\n\n"
sleep 1


# If reverse mode is on, use the second field as the front of card
if [[ $REVERSE == 'TRUE' ]]; then
	FRONTFIELD="2"
	BACKFIELD="1"
else
	FRONTFIELD="1"
	BACKFIELD="2"
fi	

CARDCOUNT=$(grep -vc '^$' $1) # Total number of cards in deck (nonempty lines)
declare -i SEEN # Number of cards seen so far
declare -i CORRECT # Number of cards correctly identified


# Deck is read as virtual file, processed with random sorting if shuffle is on
if [[ $SHUFFLE == 'TRUE' ]]; then
	ORDER_IN='sort -R'
else
	ORDER_IN='cat'
fi

while read -r line; do

	if [[ -n $line ]]; then
		# Read front and back of each card
		FRONT="$(cut -d',' -f$FRONTFIELD <(echo $line))"
		BACK="$(cut -d',' -f$BACKFIELD <(echo $line))"
		
		

		# Prompt user with front of card
		SEEN+=1
		printf "$FRONT\n"

		# Accept user's answer
		read -r ANSWER < /dev/tty

		# Compare cards
		if [[ $ANSWER == $BACK ]]; then
			CORRECT+=1
			printf "${GREEN}✔︎ Correct!${NC} ☺︎ Score: $CORRECT/$SEEN\n\n"
		else
			printf "$BACK\n"
			printf "${RED}✘ Incorrect${NC} ☹︎ Score: $CORRECT/$SEEN\n\n"
		fi
	fi



done < <($ORDER_IN $1)


printf "\nFinal Score: $CORRECT/$SEEN\n\n"


